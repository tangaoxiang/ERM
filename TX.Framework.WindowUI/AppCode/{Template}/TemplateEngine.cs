#region COPYRIGHT
//
//     THIS IS GENERATED BY TEMPLATE
//     
//     AUTHOR  :     ROYE
//     DATE       :     2010
//
//     COPYRIGHT (C) 2010, TIANXIAHOTEL TECHNOLOGIES CO., LTD. ALL RIGHTS RESERVED.
//
#endregion

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace System.Text.Template
{
    /// <summary>
    /// Ä£°æÒýÇæ
    /// </summary>
    public class TemplateEngine
    {
        public static TemplateEngine Velocity = new Velocity();

        private TemplateConfig _Config;
        private IExpressionParser _ExpressionParser;

        public TemplateEngine(TemplateConfig config, IExpressionParser expressionParser)
        {
            _Config = config;
            _ExpressionParser = expressionParser;
        }

        public string Render(string template, ITemplateContext templateContext)
        {
            TemplateParser templateParser = new TemplateParser(_Config);

            //1. syntax tree
            TokenNode ast = templateParser.Parse(template);
            //2. template context
            ITemplateContext context = templateContext.CreateLocal();
            //3. expression parser
            IExpressionParser parser = this._ExpressionParser;

            return ast.Render(parser, context);
        }

        public void Render(string template, ITemplateContext context, TextWriter output)
        {
            output.Write(this.Render(template, context));
        }

        public static TemplateEngine Create(TemplateSyntax templateSyntax)
        {
            switch (templateSyntax)
            {
                case TemplateSyntax.Velocity:
                    return TemplateEngine.Velocity;

                case TemplateSyntax.DoubleCurly:
                    return TemplateEngine.Velocity;

                case TemplateSyntax.Xml:
                    return TemplateEngine.Velocity;

                case TemplateSyntax.ProMeshHtml:
                    return TemplateEngine.Velocity;

                default:
                    return TemplateEngine.Velocity;
            }
        }
    }

    public class TemplateEngine<TConfig, TParser> : TemplateEngine
        where TConfig : TemplateConfig, new()
        where TParser : ExpressionParser, new()
    {
        public TemplateEngine()
            : base(new TConfig(), new TParser())
        {
        }
    }
}
